/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.dialog;

import bean.Abattement;
import bean.Personnel;
import controller.AbattementController;
import controller.PersonnelController;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ATH
 */
public class AbattementDialog extends javax.swing.JDialog {

    /**
     * Creates new form AvantageEnNatureDialog
     * @param parent
     * @param modal
     */
    public AbattementDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        personnelController = new PersonnelController();
        abattementController = new AbattementController();
        initComponents();
        initCBPersonnel();
        charge_professionnelle = 13;
        charge_familiale = 0;
        charge_depaysement = 0;
        retenue_cnss = 5.25;
        charge_patronale = 22.15;
        charge_anpe = 0.5;
        initTable();
    }
    
    /**
     *
     * @param parent
     * @param modal
     * @param id_personnels
     */
    public AbattementDialog(java.awt.Frame parent, boolean modal, ArrayList<Integer> id_personnels) {
        super(parent, modal);
        id_abattement = 0;
        this.id_personnels = id_personnels;
        personnelController = new PersonnelController();
        abattementController = new AbattementController();
        initComponents();
        initCBPersonnel();
        charge_professionnelle = 13;
        charge_familiale = 0;
        charge_depaysement = 0;
        retenue_cnss = 5.25;
        charge_patronale = 22.15;
        charge_anpe = 0.5;
        if(this.id_personnels.size() == 1){
            Abattement abattement = abattementController.getAbattement(this.id_personnels.get(0));
            if(abattement != null){
                charge_patronale = abattement.getCharge_patronale();
                charge_familiale = getChargeFamiliale(personnelController.getPersonnel(this.id_personnels.get(0)).getCharge());
                charge_anpe = abattement.getCharge_anpe();
            }
        }
        initTable();
    }
    
    /**
     *
     * @param parent
     * @param modal
     * @param id_abattement
     */
    public AbattementDialog(java.awt.Frame parent, boolean modal, int id_abattement) {
        super(parent, modal);
        this.id_abattement = id_abattement;
        id_personnels = new ArrayList<>();
        personnelController = new PersonnelController();
        abattementController = new AbattementController();
        
        initComponents();
        initCBPersonnel();
        if(id_abattement == 0){
            charge_professionnelle = 13;
            charge_familiale = 0;
            charge_depaysement = 0;
            retenue_cnss = 5.25;
            charge_patronale = 22.15;
            charge_anpe = 1.5;
        }else{
            Abattement abattement = abattementController.getAbattement(id_abattement);
            id_personnels.add(abattement.getId_personnel());
            charge_professionnelle = abattement.getCharge_professionnelle();
            charge_depaysement = abattement.getCharge_depaysement();
            retenue_cnss = abattement.getRetenue_cnss();
            charge_familiale = getChargeFamiliale(personnelController.getPersonnel(abattement.getId_personnel()).getCharge());
            charge_patronale = abattement.getCharge_patronale();
            charge_anpe = abattement.getCharge_anpe();
        }
        initTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rSComboMetro_personnels = new rojerusan.RSComboMetro();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_abattements = new javax.swing.JTable();
        rSButtonRiple_valider = new rojeru_san.RSButtonRiple();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestion des taux des abattements");
        setResizable(false);

        jLabel1.setText("Personnel(s)");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Liste des avantages en nature"));

        jTable_abattements.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "LIBELLE", "TAUX"
            }
        ));
        jScrollPane1.setViewportView(jTable_abattements);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rSButtonRiple_valider.setText("Valider");
        rSButtonRiple_valider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonRiple_validerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rSComboMetro_personnels, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 14, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rSButtonRiple_valider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rSComboMetro_personnels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rSButtonRiple_valider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rSButtonRiple_validerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonRiple_validerActionPerformed
        if(id_abattement != 0){
//            id_personnels.forEach(id -> {
//                avantageEnNatureController.updateAvantageEnNature(id_avantage, (int)jTable_avantages.getValueAt(0, 1), (int)jTable_avantages.getValueAt(1, 1), (int)jTable_avantages.getValueAt(2, 1), (int)jTable_avantages.getValueAt(3, 1), (int)jTable_avantages.getValueAt(4, 1), (int)jTable_avantages.getValueAt(5, 1), id);
//            });
        }else{
            double taux_abattement = Double.parseDouble(jTable_abattements.getValueAt(0, 1).toString().trim().replaceAll(" ", "").replaceAll("%", ""));
            if(taux_abattement < 0 || taux_abattement > 100){
                JOptionPane.showMessageDialog(null, "Saisir un taux compris entre 0 et 100 inclus ", "Format incorrect !", JOptionPane.WARNING_MESSAGE);
                return;
            }
            id_personnels.forEach(id -> {
                try {
                    charge_familiale = getChargeFamiliale(personnelController.getPersonnel(id).getCharge());
                    abattementController.addAbattement(
                            Double.parseDouble(jTable_abattements.getValueAt(0, 1).toString().trim().replaceAll(" ", "").replaceAll("%", "")), 
                            charge_familiale,
                            charge_depaysement,
                            retenue_cnss,
                            charge_patronale,
                            charge_anpe,
                            id
                    );
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Saisir un bon taux ", "Format incorrect !", JOptionPane.WARNING_MESSAGE);
                    System.out.println("Erreur " + e.getMessage());
                }
                
            });
        }
        JOptionPane.showMessageDialog(null, "Opération effectuée avec succes ", "Réussie !", JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
    }//GEN-LAST:event_rSButtonRiple_validerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbattementDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            AbattementDialog dialog = new AbattementDialog(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }
    private ArrayList<Integer> id_personnels;
    private final PersonnelController personnelController;
    private int id_abattement;
    private final AbattementController abattementController;
    private double charge_professionnelle, charge_familiale, charge_depaysement, retenue_cnss, charge_patronale, charge_anpe;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_abattements;
    private rojeru_san.RSButtonRiple rSButtonRiple_valider;
    private rojerusan.RSComboMetro rSComboMetro_personnels;
    // End of variables declaration//GEN-END:variables



    private void initTable(){
        String entete[] = {"LIBELLE", "TAUX (%)"};
        DefaultTableModel dt=new DefaultTableModel(null,entete);
        dt.setRowCount(0);
        
        //charge prof
        //System.out.println("id_abattement = " + id_abattement);
        if(id_abattement == 0){
            Object colonne[] = new Object[2];
            colonne[0] = "Charge professionnelle";
            colonne[1] = charge_professionnelle;
            dt.addRow(colonne);
            //charge famill
            colonne = new Object[2];
            colonne[0] = "Charge familiale";
            colonne[1] = charge_familiale;
            dt.addRow(colonne);
            //retenue cnss
            colonne = new Object[2];
            colonne[0] = "Retenue CNSS";
            colonne[1] = retenue_cnss;
            dt.addRow(colonne);
            //charge depaysement
            colonne = new Object[2];
            colonne[0] = "Charge depaysement";
            colonne[1] = charge_depaysement;
            dt.addRow(colonne);
            //charge patronale
            colonne = new Object[2];
            colonne[0] = "Charge patronale";
            colonne[1] = charge_patronale;
            dt.addRow(colonne);
            //charge anpe
            colonne = new Object[2];
            colonne[0] = "Retenue ANPE";
            colonne[1] = charge_anpe;
            dt.addRow(colonne);
        }else{
            Object colonne[] = new Object[2];
            Abattement ab = abattementController.getAbattement(id_abattement);
            colonne[0] = "Charge professionnelle";
            colonne[1] = ab.getCharge_professionnelle();
            dt.addRow(colonne);
            //charge famill
            colonne = new Object[2];
            colonne[0] = "Charge familiale";
            colonne[1] = getChargeFamiliale(personnelController.getPersonnel(ab.getId_personnel()).getCharge());
            dt.addRow(colonne);
            //retenue cnss
            colonne = new Object[2];
            colonne[0] = "Retenue CNSS";
            colonne[1] = ab.getRetenue_cnss();
            dt.addRow(colonne);
            //charge depaysement
            colonne = new Object[2];
            colonne[0] = "Charge depaysement";
            colonne[1] = ab.getCharge_depaysement();
            dt.addRow(colonne);
            //charge patronale
            colonne = new Object[2];
            colonne[0] = "Charge patronale";
            colonne[1] = ab.getCharge_patronale();
            dt.addRow(colonne);
            //charge anpe
            colonne = new Object[2];
            colonne[0] = "Retenue ANPE";
            colonne[1] = ab.getCharge_anpe();
            dt.addRow(colonne);
        }
        
        this.jTable_abattements.setModel(dt);
        if (jTable_abattements.getColumnModel().getColumnCount() > 0) {
            //jTable_abattements.getColumnModel().getColumn(1).setCellRenderer(NumberRenderer.get_Pourcentage_render());
            jTable_abattements.setRowHeight(30);
            jTable_abattements.getTableHeader().setBackground(new Color(0,112,192));
            jTable_abattements.getTableHeader().setForeground(Color.white);
            jTable_abattements.getTableHeader().setFont(new Font("Cambria Math", Font.BOLD, 13));
            jTable_abattements.setFont(new Font("Cambria Math", Font.BOLD, 12));
            jTable_abattements.getModel().addTableModelListener((TableModelEvent e) -> {
                mise_a_jour_abattement();
            });
        }
    }

    private void initCBPersonnel() {
        rSComboMetro_personnels.removeAllItems();
        id_personnels.forEach(id -> {
            Personnel p = personnelController.getPersonnel(id);
            System.out.println(id);
            rSComboMetro_personnels.addItem(p.getNom_prenom());
        });
    }

    private void mise_a_jour_abattement() {
        int row = jTable_abattements.getSelectedRow();
        if(id_abattement == 0){
            switch(row){
                case 0:
                    charge_professionnelle = Double.parseDouble(jTable_abattements.getValueAt(row, 1).toString().trim().replaceAll(" ", "").replaceAll("%", ""));
                    break;
                
                case 2:
                    retenue_cnss = Double.parseDouble(jTable_abattements.getValueAt(row, 1).toString().trim().replaceAll(" ", "").replaceAll("%", ""));
                    break;
                case 3:
                    charge_depaysement = Double.parseDouble(jTable_abattements.getValueAt(row, 1).toString().trim().replaceAll(" ", "").replaceAll("%", ""));
                    break;
                case 4:
                    charge_patronale = Double.parseDouble(jTable_abattements.getValueAt(row, 1).toString().trim().replaceAll(" ", "").replaceAll("%", ""));
                    break;
                case 5:
                    //inchanger
                    charge_anpe = Double.parseDouble(jTable_abattements.getValueAt(row, 1).toString().trim().replaceAll(" ", "").replaceAll("%", ""));
                    break;
                default:
                    break;
            }
            initTable();
        }else{
            String libelle;
            double taux;
            switch(row){
                case 0:
                    libelle = "charge_professionnelle";
                    break;
                case 1:
                    libelle = "charge_familiale";
                    break;
                case 2:
                    libelle = "retenue_cnss";
                    break;
                case 3:
                    libelle = "charge_depaysement";
                    break;
                case 4:
                    libelle = "charge_patronale";
                    break;
                case 5:
                    libelle = "charge_anpe";
                    break;
                default:
                    libelle = "";
                    break;        
            }
            try {
                taux = Double.parseDouble(jTable_abattements.getValueAt(row, 1).toString().trim().replaceAll(" ", "").replaceAll("%", ""));
                abattementController.update(id_abattement, libelle, taux);
                initTable();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Saisir un taux correct entre 0 et 100 inclus ", "Format incorrect !", JOptionPane.WARNING_MESSAGE);
                System.out.println("Erreur " + e.getMessage());
            }
        }
        
        
    }

    private double getChargeFamiliale(int charge) {
        switch(charge){
            case 0:
                return 0;
            case 1:
                return 5;
            case 2:
                return 10;
            case 3:
                return 12;
            case 4:
                return 13;
            case 5:
                return 14;
            case 6:
                return 15;
            case 7:
                return 30;
            default:
                return 0;
        }
    }
}
