/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.panel;

import bean.Personnel;
import controller.PersonnelController;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import main.NumberRenderer;
import view.dialog.AbattementDialog;
import view.dialog.AvantageEnNatureDialog;
import view.dialog.PersonnelDialog;
import view.dialog.RenumerationDialog;

/**
 *
 * @author ATH
 */
public class PersonnelPanel extends javax.swing.JPanel {

    /**
     * Creates new form PersonnelPanel
     */
    public PersonnelPanel() {
        personnelController = new PersonnelController();
        initComponents();
        initTable();
        initNew();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup = new javax.swing.JPopupMenu();
        menu_item_avantage_en_nature = new javax.swing.JMenuItem();
        menu_item_abattement = new javax.swing.JMenuItem();
        menu_item_renumeration = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menu_item_add_personnel = new javax.swing.JMenuItem();
        menu_item_update_personnel = new javax.swing.JMenuItem();
        menu_item_remove_personnel = new javax.swing.JMenuItem();
        rSPanelImage1 = new rojerusan.RSPanelImage();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_personnel = new javax.swing.JTable();
        rSButtonRiple_ajouter = new rojeru_san.RSButtonRiple();
        rSButtonRiple_suppresion_modification = new rojeru_san.RSButtonRiple();
        rSMTextFull2 = new rojeru_san.RSMTextFull();

        menu_item_avantage_en_nature.setText("Attribuer au(x) personnel(s) des avantages en nature");
        menu_item_avantage_en_nature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_avantage_en_natureActionPerformed(evt);
            }
        });
        popup.add(menu_item_avantage_en_nature);

        menu_item_abattement.setText("Attribuer au(x) personnel(s) des taux d'abattements");
        menu_item_abattement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_abattementActionPerformed(evt);
            }
        });
        popup.add(menu_item_abattement);

        menu_item_renumeration.setText("Attribuer au(x) personnel(s) une rénumeration accessoire");
        menu_item_renumeration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_renumerationActionPerformed(evt);
            }
        });
        popup.add(menu_item_renumeration);
        popup.add(jSeparator1);

        menu_item_add_personnel.setText("Ajouter personnel");
        menu_item_add_personnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_add_personnelActionPerformed(evt);
            }
        });
        popup.add(menu_item_add_personnel);

        menu_item_update_personnel.setText("Mettre à jour ce personnel");
        menu_item_update_personnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_update_personnelActionPerformed(evt);
            }
        });
        popup.add(menu_item_update_personnel);

        menu_item_remove_personnel.setText("Supprimer ce personnel");
        menu_item_remove_personnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_remove_personnelActionPerformed(evt);
            }
        });
        popup.add(menu_item_remove_personnel);

        setPreferredSize(new java.awt.Dimension(888, 414));

        rSPanelImage1.setImagen(new javax.swing.ImageIcon(getClass().getResource("/ressources/bo.jpg"))); // NOI18N

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Liste des personnels"));
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseReleased(evt);
            }
        });

        jTable_personnel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "N°", "MATRICULE", "NON ET PRENOM", "FONCTION", "TELEPHONE", "ADRESSE", "SALAIRE", "CHARGE", "ID"
            }
        ));
        jTable_personnel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable_personnelMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_personnel);
        if (jTable_personnel.getColumnModel().getColumnCount() > 0) {
            jTable_personnel.getColumnModel().getColumn(0).setMinWidth(35);
            jTable_personnel.getColumnModel().getColumn(0).setPreferredWidth(35);
            jTable_personnel.getColumnModel().getColumn(0).setMaxWidth(35);
            jTable_personnel.getColumnModel().getColumn(1).setMinWidth(100);
            jTable_personnel.getColumnModel().getColumn(1).setPreferredWidth(110);
            jTable_personnel.getColumnModel().getColumn(1).setMaxWidth(120);
            jTable_personnel.getColumnModel().getColumn(3).setMinWidth(120);
            jTable_personnel.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTable_personnel.getColumnModel().getColumn(3).setMaxWidth(200);
            jTable_personnel.getColumnModel().getColumn(4).setMinWidth(100);
            jTable_personnel.getColumnModel().getColumn(4).setPreferredWidth(140);
            jTable_personnel.getColumnModel().getColumn(4).setMaxWidth(150);
            jTable_personnel.getColumnModel().getColumn(5).setMinWidth(120);
            jTable_personnel.getColumnModel().getColumn(5).setPreferredWidth(180);
            jTable_personnel.getColumnModel().getColumn(5).setMaxWidth(200);
            jTable_personnel.getColumnModel().getColumn(6).setMinWidth(120);
            jTable_personnel.getColumnModel().getColumn(6).setPreferredWidth(130);
            jTable_personnel.getColumnModel().getColumn(6).setMaxWidth(160);
            jTable_personnel.getColumnModel().getColumn(7).setMinWidth(75);
            jTable_personnel.getColumnModel().getColumn(7).setPreferredWidth(75);
            jTable_personnel.getColumnModel().getColumn(7).setMaxWidth(75);
            jTable_personnel.getColumnModel().getColumn(8).setMinWidth(15);
            jTable_personnel.getColumnModel().getColumn(8).setPreferredWidth(15);
            jTable_personnel.getColumnModel().getColumn(8).setMaxWidth(15);
        }

        rSButtonRiple_ajouter.setText("Ajouter");
        rSButtonRiple_ajouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonRiple_ajouterActionPerformed(evt);
            }
        });

        rSButtonRiple_suppresion_modification.setText("Mettre à jour");
        rSButtonRiple_suppresion_modification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonRiple_suppresion_modificationActionPerformed(evt);
            }
        });

        rSMTextFull2.setPlaceholder("Rechercher");

        javax.swing.GroupLayout rSPanelImage1Layout = new javax.swing.GroupLayout(rSPanelImage1);
        rSPanelImage1.setLayout(rSPanelImage1Layout);
        rSPanelImage1Layout.setHorizontalGroup(
            rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelImage1Layout.createSequentialGroup()
                .addContainerGap(124, Short.MAX_VALUE)
                .addComponent(rSMTextFull2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rSButtonRiple_suppresion_modification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rSButtonRiple_ajouter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rSPanelImage1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        rSPanelImage1Layout.setVerticalGroup(
            rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelImage1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rSButtonRiple_ajouter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rSButtonRiple_suppresion_modification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rSMTextFull2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelImage1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelImage1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rSButtonRiple_ajouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonRiple_ajouterActionPerformed
        if(rSButtonRiple_ajouter.getText().equals("Ajouter")){
            addPersonnel();
        }else{
            updatePersonnel();
        }
    }//GEN-LAST:event_rSButtonRiple_ajouterActionPerformed

    private void menu_item_add_personnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_add_personnelActionPerformed
        addPersonnel();
    }//GEN-LAST:event_menu_item_add_personnelActionPerformed

    private void menu_item_update_personnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_update_personnelActionPerformed
        updatePersonnel();
    }//GEN-LAST:event_menu_item_update_personnelActionPerformed

    private void menu_item_remove_personnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_remove_personnelActionPerformed
        removePersonnel();
    }//GEN-LAST:event_menu_item_remove_personnelActionPerformed

    private void jScrollPane1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseReleased
        popupAction(evt);
        if(evt.isPopupTrigger() && evt.getComponent() instanceof JScrollPane){
            popup.show(evt.getComponent(), evt.getX(), evt.getY());
            popup.setVisible(true);
        }
    }//GEN-LAST:event_jScrollPane1MouseReleased

    private void jTable_personnelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_personnelMouseReleased
        popupAction(evt);
        if(evt.isPopupTrigger() && evt.getComponent() instanceof JTable){
            popup.show(evt.getComponent(), evt.getX(), evt.getY());
            popup.setVisible(true);
        }
    }//GEN-LAST:event_jTable_personnelMouseReleased

    private void rSButtonRiple_suppresion_modificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonRiple_suppresion_modificationActionPerformed
        removePersonnel();
    }//GEN-LAST:event_rSButtonRiple_suppresion_modificationActionPerformed

    private void menu_item_avantage_en_natureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_avantage_en_natureActionPerformed
        int[] selected_rows = jTable_personnel.getSelectedRows();
        ArrayList<Integer> id_personnels = new ArrayList<>();
        for (int row : selected_rows) {
            id_personnels.add((int)jTable_personnel.getValueAt(row, 8));
        }
        AvantageEnNatureDialog avantageEnNatureDialog = new AvantageEnNatureDialog(null, true, id_personnels);
        avantageEnNatureDialog.setVisible(true);
    }//GEN-LAST:event_menu_item_avantage_en_natureActionPerformed

    private void menu_item_abattementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_abattementActionPerformed
        int[] selected_rows = jTable_personnel.getSelectedRows();
        ArrayList<Integer> id_personnels = new ArrayList<>();
        for (int row : selected_rows) {
            id_personnels.add((int)jTable_personnel.getValueAt(row, 8));
        }
        AbattementDialog abattementDialog = new AbattementDialog(null, true, id_personnels);
        abattementDialog.setVisible(true);
    }//GEN-LAST:event_menu_item_abattementActionPerformed

    private void menu_item_renumerationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_renumerationActionPerformed
        int[] selected_rows = jTable_personnel.getSelectedRows();
        ArrayList<Integer> id_personnels = new ArrayList<>();
        for (int row : selected_rows) {
            id_personnels.add((int)jTable_personnel.getValueAt(row, 8));
        }
        RenumerationDialog renumerationDialog = new RenumerationDialog(null, true, id_personnels);
        renumerationDialog.setVisible(true);
    }//GEN-LAST:event_menu_item_renumerationActionPerformed

    private final PersonnelController personnelController;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable_personnel;
    private javax.swing.JMenuItem menu_item_abattement;
    private javax.swing.JMenuItem menu_item_add_personnel;
    private javax.swing.JMenuItem menu_item_avantage_en_nature;
    private javax.swing.JMenuItem menu_item_remove_personnel;
    private javax.swing.JMenuItem menu_item_renumeration;
    private javax.swing.JMenuItem menu_item_update_personnel;
    private javax.swing.JPopupMenu popup;
    private rojeru_san.RSButtonRiple rSButtonRiple_ajouter;
    private rojeru_san.RSButtonRiple rSButtonRiple_suppresion_modification;
    private rojeru_san.RSMTextFull rSMTextFull2;
    private rojerusan.RSPanelImage rSPanelImage1;
    // End of variables declaration//GEN-END:variables

    private void addPersonnel() {
        PersonnelDialog personnelDialog = new PersonnelDialog(null, true);
        personnelDialog.setVisible(true);
        initTable();

    }

    

    private void updatePersonnel() {
        int row = jTable_personnel.getSelectedRow();
        if(row < 0){
            return;
        }
        int id_personnel = Integer.parseInt(jTable_personnel.getValueAt(row, 8).toString());
        PersonnelDialog personnelDialog = new PersonnelDialog(null, true, personnelController.getPersonnel(id_personnel));
        personnelDialog.setVisible(true);
        initTable();
    }
    private void removePersonnel() {
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer " + jTable_personnel.getValueAt(jTable_personnel.getSelectedRow(), 2) + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
        if(choice == 0){
            personnelController.removePersonnel(Integer.parseInt(jTable_personnel.getValueAt(jTable_personnel.getSelectedRow(), 8).toString()));
        }
        initTable();
    }
    private void initNew() {
        rSButtonRiple_ajouter.setText("Ajouter");
        rSButtonRiple_ajouter.setBackground(Color.green);
        rSButtonRiple_ajouter.setColorHover(new Color(0,200,0));
        
        rSButtonRiple_suppresion_modification.setText("");
        rSButtonRiple_suppresion_modification.setBackground(new Color(0,112,192));
        rSButtonRiple_suppresion_modification.setVisible(false);
    }
    
    private void initUpdate() {
        rSButtonRiple_ajouter.setText("Mettre à jour");
        rSButtonRiple_ajouter.setBackground(Color.orange);
        rSButtonRiple_ajouter.setColorHover(new Color(200,200,0));
        
        rSButtonRiple_suppresion_modification.setText("Suprimer");
        rSButtonRiple_suppresion_modification.setBackground(Color.red);
        rSButtonRiple_suppresion_modification.setColorHover(new Color(153,102,0));
        rSButtonRiple_suppresion_modification.setVisible(true);
    }
    private void initTable() {
        initNew();
        String entete[] = {"N°", "MATRICULE", "NON ET PRENOM", "FONCTION", "TELEPHONE", "ADRESSE", "SALAIRE", "CHARGE", "ID  "};
        DefaultTableModel dt=new DefaultTableModel(null,entete);
        dt.setRowCount(0);
        
//        String annee = null, cycle = null, classe = null, rechercher = null, nationalite = null, sexe = null;
//        if(rSComboMetro_annee.getSelectedIndex() > -1){
//            annee = rSComboMetro_annee.getSelectedItem().toString();
//        }
//        if(rSComboMetro_cycle.getSelectedIndex() > -1){
//            cycle = rSComboMetro_cycle.getSelectedItem().toString();
//        }
//        if(rSComboMetro_classe.getSelectedIndex() > -1){
//            classe = rSComboMetro_classe.getSelectedItem().toString();
//        }
//        if(rSMTextFull_recherche.getText().length() > 0){
//            rechercher = rSMTextFull_recherche.getText();
//        }
//        if(rSComboMetro_nationalite.getSelectedIndex() > -1){
//            nationalite = rSComboMetro_nationalite.getSelectedItem().toString();
//        }
//        if(rSComboMetro_sexe.getSelectedIndex() > -1){
//            sexe = rSComboMetro_sexe.getSelectedItem().toString();
//        }
        ArrayList<Personnel> list_Personnels = personnelController.getPersonnels();
        
        for(int i = 0; i< list_Personnels.size(); i++){
            Object colonne[] = new Object[9];
            colonne[0] = i + 1;
            colonne[1] = list_Personnels.get(i).getMatricule();
            colonne[2] = list_Personnels.get(i).getNom_prenom();
            colonne[3] = list_Personnels.get(i).getFonction();
            colonne[4] = list_Personnels.get(i).getTelephone();
            colonne[5] = list_Personnels.get(i).getAdresse();
            colonne[6] = list_Personnels.get(i).getSalaire();
            colonne[7] = list_Personnels.get(i).getCharge();
            colonne[8] = list_Personnels.get(i).getId();
            System.out.println(list_Personnels.get(i).getId());
            dt.addRow(colonne);
        }
        
        this.jTable_personnel.setModel(dt);
        if (jTable_personnel.getColumnModel().getColumnCount() > 0) {
            jTable_personnel.getColumnModel().getColumn(0).setMinWidth(35);
            jTable_personnel.getColumnModel().getColumn(0).setPreferredWidth(35);
            jTable_personnel.getColumnModel().getColumn(0).setMaxWidth(35);
            jTable_personnel.getColumnModel().getColumn(1).setMinWidth(100);
            jTable_personnel.getColumnModel().getColumn(1).setPreferredWidth(110);
            jTable_personnel.getColumnModel().getColumn(1).setMaxWidth(120);
            jTable_personnel.getColumnModel().getColumn(3).setMinWidth(120);
            jTable_personnel.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTable_personnel.getColumnModel().getColumn(3).setMaxWidth(200);
            jTable_personnel.getColumnModel().getColumn(4).setMinWidth(100);
            jTable_personnel.getColumnModel().getColumn(4).setPreferredWidth(140);
            jTable_personnel.getColumnModel().getColumn(4).setMaxWidth(150);
            jTable_personnel.getColumnModel().getColumn(5).setMinWidth(120);
            jTable_personnel.getColumnModel().getColumn(5).setPreferredWidth(180);
            jTable_personnel.getColumnModel().getColumn(5).setMaxWidth(200);
            jTable_personnel.getColumnModel().getColumn(6).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_personnel.getColumnModel().getColumn(6).setMinWidth(120);
            jTable_personnel.getColumnModel().getColumn(6).setPreferredWidth(130);
            jTable_personnel.getColumnModel().getColumn(6).setMaxWidth(160);
            jTable_personnel.getColumnModel().getColumn(7).setMinWidth(75);
            jTable_personnel.getColumnModel().getColumn(7).setPreferredWidth(75);
            jTable_personnel.getColumnModel().getColumn(7).setMaxWidth(75);
            jTable_personnel.getColumnModel().getColumn(8).setMinWidth(5);
            jTable_personnel.getColumnModel().getColumn(8).setPreferredWidth(5);
            jTable_personnel.getColumnModel().getColumn(8).setMaxWidth(5);
            //jTable_personnel.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
            jTable_personnel.setRowHeight(30);
            jTable_personnel.getTableHeader().setBackground(new Color(0,112,192));
            jTable_personnel.getTableHeader().setForeground(Color.white);
            jTable_personnel.getTableHeader().setFont(new Font("Cambria Math", Font.BOLD, 13));
            jTable_personnel.setFont(new Font("Cambria Math", Font.BOLD, 12));
        }
    }

    private void popupAction(java.awt.event.MouseEvent evt) {
        int index = jTable_personnel.getSelectedRow();
        if(index < 0){
            menu_item_avantage_en_nature.setEnabled(false);
            menu_item_renumeration.setEnabled(false);
            menu_item_abattement.setEnabled(false);
            menu_item_remove_personnel.setEnabled(false);
            menu_item_update_personnel.setEnabled(false);
            initNew();
        }else{
            menu_item_avantage_en_nature.setEnabled(true);
            menu_item_abattement.setEnabled(true);
            menu_item_renumeration.setEnabled(true);
            menu_item_add_personnel.setEnabled(true);
            menu_item_remove_personnel.setEnabled(true);
            menu_item_update_personnel.setEnabled(true);
            initUpdate();
        }
    }
}
