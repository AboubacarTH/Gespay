/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.panel;

import bean.Abattement;
import bean.Annee;
import bean.AvantageEnNature;
import bean.Mois;
import bean.Personnel;
import bean.RenumerationAccessoire;
import controller.AbattementController;
import controller.AnneeController;
import controller.AvantageEnNatureController;
import controller.ImpotDuController;
import controller.MoisController;
import controller.PersonnelController;
import controller.RenumerationAccessoireController;
import database.ConnecterDB;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import main.NumberRenderer;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import view.dialog.RenumerationDialog;

/**
 *
 * @author ATH
 */
public class NouveauPaiementPanel extends javax.swing.JPanel {

    /**
     * Creates new form AvantageEnNaturePanel
     */
    public NouveauPaiementPanel() {
        personnelController = new PersonnelController();
        anneeController = new AnneeController();
        moisController = new MoisController();
        renumerationAccessoireController = new RenumerationAccessoireController();
        abattementController = new AbattementController();
        avantageEnNatureController = new AvantageEnNatureController();
        impotDuController = new ImpotDuController();
        initComponents();
        initCBAnee();
        initCBMois();
        initTable();
        initNew();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup = new javax.swing.JPopupMenu();
        menu_item_payer = new javax.swing.JMenuItem();
        menu_item_annuler_paiement = new javax.swing.JMenuItem();
        rSPanelImage1 = new rojerusan.RSPanelImage();
        rSButtonRiple_ajouter = new rojeru_san.RSButtonRiple();
        rSMTextFull_rechercher = new rojeru_san.RSMTextFull();
        jLabel1 = new javax.swing.JLabel();
        rSComboMetro_annee = new rojerusan.RSComboMetro();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_renumeration = new javax.swing.JTable();
        rSButtonRiple_modifier_supprimer = new rojeru_san.RSButtonRiple();
        rSComboMetro_mois = new rojerusan.RSComboMetro();
        rSButton1 = new rojeru_san.RSButton();

        menu_item_payer.setText("Payer et archiver");
        menu_item_payer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_payerActionPerformed(evt);
            }
        });
        popup.add(menu_item_payer);

        menu_item_annuler_paiement.setText("Annuler paiement");
        menu_item_annuler_paiement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_annuler_paiementActionPerformed(evt);
            }
        });
        popup.add(menu_item_annuler_paiement);

        rSPanelImage1.setImagen(new javax.swing.ImageIcon(getClass().getResource("/ressources/bo.jpg"))); // NOI18N

        rSButtonRiple_ajouter.setText("Mettre à jour");
        rSButtonRiple_ajouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonRiple_ajouterActionPerformed(evt);
            }
        });

        rSMTextFull_rechercher.setPlaceholder("Rechercher");
        rSMTextFull_rechercher.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rSMTextFull_rechercherKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Année");

        rSComboMetro_annee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSComboMetro_anneeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Mois");

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1500, 402));
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseReleased(evt);
            }
        });

        jTable_renumeration.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "N°", "NOM ET PRENOM", "ANNEE", "MOIS", "SALAIRE DE BASE", "RBG", "RBGI", "CNSS 5,25", "RNI", "PRIME NON IMPOSABLE", "PRIME IMPOSABLE", "ABAT-PRO", "ABAT CHARGE FAMILIAL", "BASE CALCUL UTS", "IUTS", "ID", "NET A PAYER"
            }
        ));
        jTable_renumeration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable_renumerationMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_renumeration);
        if (jTable_renumeration.getColumnModel().getColumnCount() > 0) {
            jTable_renumeration.getColumnModel().getColumn(0).setMinWidth(35);
            jTable_renumeration.getColumnModel().getColumn(0).setPreferredWidth(35);
            jTable_renumeration.getColumnModel().getColumn(0).setMaxWidth(35);
            jTable_renumeration.getColumnModel().getColumn(2).setMinWidth(90);
            jTable_renumeration.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable_renumeration.getColumnModel().getColumn(2).setMaxWidth(110);
            jTable_renumeration.getColumnModel().getColumn(3).setMinWidth(120);
            jTable_renumeration.getColumnModel().getColumn(3).setPreferredWidth(130);
            jTable_renumeration.getColumnModel().getColumn(3).setMaxWidth(160);
            jTable_renumeration.getColumnModel().getColumn(4).setMinWidth(120);
            jTable_renumeration.getColumnModel().getColumn(4).setPreferredWidth(130);
            jTable_renumeration.getColumnModel().getColumn(4).setMaxWidth(160);
            jTable_renumeration.getColumnModel().getColumn(5).setMinWidth(120);
            jTable_renumeration.getColumnModel().getColumn(5).setPreferredWidth(130);
            jTable_renumeration.getColumnModel().getColumn(5).setMaxWidth(160);
            jTable_renumeration.getColumnModel().getColumn(6).setMinWidth(120);
            jTable_renumeration.getColumnModel().getColumn(6).setPreferredWidth(130);
            jTable_renumeration.getColumnModel().getColumn(6).setMaxWidth(160);
            jTable_renumeration.getColumnModel().getColumn(8).setMinWidth(120);
            jTable_renumeration.getColumnModel().getColumn(8).setPreferredWidth(130);
            jTable_renumeration.getColumnModel().getColumn(8).setMaxWidth(160);
            jTable_renumeration.getColumnModel().getColumn(14).setMinWidth(120);
            jTable_renumeration.getColumnModel().getColumn(14).setPreferredWidth(130);
            jTable_renumeration.getColumnModel().getColumn(14).setMaxWidth(160);
            jTable_renumeration.getColumnModel().getColumn(15).setMinWidth(5);
            jTable_renumeration.getColumnModel().getColumn(15).setPreferredWidth(5);
            jTable_renumeration.getColumnModel().getColumn(15).setMaxWidth(5);
            jTable_renumeration.getColumnModel().getColumn(16).setMinWidth(150);
            jTable_renumeration.getColumnModel().getColumn(16).setPreferredWidth(150);
            jTable_renumeration.getColumnModel().getColumn(16).setMaxWidth(150);
        }

        rSButtonRiple_modifier_supprimer.setText("Supprimer");
        rSButtonRiple_modifier_supprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonRiple_modifier_supprimerActionPerformed(evt);
            }
        });

        rSComboMetro_mois.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSComboMetro_moisActionPerformed(evt);
            }
        });

        rSButton1.setText("Bulletin");
        rSButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rSPanelImage1Layout = new javax.swing.GroupLayout(rSPanelImage1);
        rSPanelImage1.setLayout(rSPanelImage1Layout);
        rSPanelImage1Layout.setHorizontalGroup(
            rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelImage1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1488, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rSPanelImage1Layout.createSequentialGroup()
                        .addComponent(rSMTextFull_rechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rSButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(201, 201, 201)
                        .addComponent(rSButtonRiple_modifier_supprimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rSButtonRiple_ajouter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rSPanelImage1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rSComboMetro_annee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rSComboMetro_mois, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        rSPanelImage1Layout.setVerticalGroup(
            rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelImage1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rSPanelImage1Layout.createSequentialGroup()
                        .addGroup(rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rSComboMetro_annee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(rSComboMetro_mois, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rSMTextFull_rechercher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rSButtonRiple_modifier_supprimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rSButtonRiple_ajouter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rSPanelImage1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(rSButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelImage1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelImage1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menu_item_payerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_payerActionPerformed
        updateRenumeration();
    }//GEN-LAST:event_menu_item_payerActionPerformed

    private void menu_item_annuler_paiementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_annuler_paiementActionPerformed
        removeRenumeration();
    }//GEN-LAST:event_menu_item_annuler_paiementActionPerformed

    private void rSButtonRiple_ajouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonRiple_ajouterActionPerformed
        if(rSButtonRiple_ajouter.getText().equals("Ajouter")){
            //
        }else{
            updateRenumeration();
        }
    }//GEN-LAST:event_rSButtonRiple_ajouterActionPerformed

    private void rSButtonRiple_modifier_supprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonRiple_modifier_supprimerActionPerformed
        removeRenumeration();
    }//GEN-LAST:event_rSButtonRiple_modifier_supprimerActionPerformed

    private void rSComboMetro_anneeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSComboMetro_anneeActionPerformed
        initTable();
    }//GEN-LAST:event_rSComboMetro_anneeActionPerformed

    private void rSComboMetro_moisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSComboMetro_moisActionPerformed
        initTable();
    }//GEN-LAST:event_rSComboMetro_moisActionPerformed

    private void rSMTextFull_rechercherKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rSMTextFull_rechercherKeyReleased
        initTable();
    }//GEN-LAST:event_rSMTextFull_rechercherKeyReleased

    private void jScrollPane1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseReleased
        popupAction(evt);
        if(evt.isPopupTrigger() && evt.getComponent() instanceof JScrollPane){
            popup.show(evt.getComponent(), evt.getX(), evt.getY());
            popup.setVisible(true);
        }
    }//GEN-LAST:event_jScrollPane1MouseReleased

    private void jTable_renumerationMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_renumerationMouseReleased
        popupAction(evt);
        if(evt.isPopupTrigger() && evt.getComponent() instanceof JTable){
            popup.show(evt.getComponent(), evt.getX(), evt.getY());
            popup.setVisible(true);
        }
    }//GEN-LAST:event_jTable_renumerationMouseReleased

    private void rSButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButton1ActionPerformed
ConnecterDB cbd = new ConnecterDB();
        try{
            HashMap<String, Object> m = new HashMap<String, Object>(); 
//      Map m=new HashMap();
      String reports="src\\report\\bulletin_salaire.jrxml";
      
      JasperReport jr=JasperCompileManager.compileReport(reports);
      JasperPrint jp=JasperFillManager.fillReport(jr, m, cbd.connection);
      JasperViewer.viewReport(jp, false);
         
     }catch(Exception ex){
         JOptionPane.showMessageDialog(this," Echec d'impression du Rélévé de note" +ex);
     }        // TODO add your handling code here:
    }//GEN-LAST:event_rSButton1ActionPerformed

    private final PersonnelController personnelController;
    private final AnneeController anneeController;
    private final MoisController moisController;
    private final RenumerationAccessoireController renumerationAccessoireController;
    private final AbattementController abattementController;
    private final AvantageEnNatureController avantageEnNatureController;
    private final ImpotDuController impotDuController;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_renumeration;
    private javax.swing.JMenuItem menu_item_annuler_paiement;
    private javax.swing.JMenuItem menu_item_payer;
    private javax.swing.JPopupMenu popup;
    private rojeru_san.RSButton rSButton1;
    private rojeru_san.RSButtonRiple rSButtonRiple_ajouter;
    private rojeru_san.RSButtonRiple rSButtonRiple_modifier_supprimer;
    private rojerusan.RSComboMetro rSComboMetro_annee;
    private rojerusan.RSComboMetro rSComboMetro_mois;
    private rojeru_san.RSMTextFull rSMTextFull_rechercher;
    private rojerusan.RSPanelImage rSPanelImage1;
    // End of variables declaration//GEN-END:variables

    private void popupAction(java.awt.event.MouseEvent evt) {
//        int r = jTable_renumeration.rowAtPoint(evt.getPoint());
//        if(r >=0 && r < jTable_renumeration.getRowCount()){
//            jTable_renumeration.setRowSelectionInterval(r, r);
//
//        }else{
//            jTable_renumeration.clearSelection();
//        }
        int index = jTable_renumeration.getSelectedRow();
        if(index < 0){
            menu_item_annuler_paiement.setEnabled(false);
            menu_item_payer.setEnabled(false);
            initNew();
        }else{
            menu_item_annuler_paiement.setEnabled(true);
            menu_item_payer.setEnabled(true);
            initUpdate();
        }
    }
    private void updateRenumeration() {
        int row = jTable_renumeration.getSelectedRow();
        if(row < 0){
            return;
        }
        int id_renumeration = Integer.parseInt(jTable_renumeration.getValueAt(row, 9).toString());
        RenumerationDialog renumerationDialog = new RenumerationDialog(null, true, id_renumeration);
        renumerationDialog.setVisible(true);
        initTable();
    }
    private void removeRenumeration() {
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir supprimer cette rénumeration de " + jTable_renumeration.getValueAt(jTable_renumeration.getSelectedRow(), 1) + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
        if(choice == 0){
            renumerationAccessoireController.removeRenumeration(Integer.parseInt(jTable_renumeration.getValueAt(jTable_renumeration.getSelectedRow(), 9).toString()));
        }
        initTable();
    }
    private void initNew() {
        rSButtonRiple_ajouter.setText("");
        rSButtonRiple_ajouter.setBackground(Color.green);
        rSButtonRiple_ajouter.setColorHover(new Color(0,200,0));
        rSButtonRiple_ajouter.setVisible(false);
        
        rSButtonRiple_modifier_supprimer.setText("");
        rSButtonRiple_modifier_supprimer.setBackground(new Color(0,112,192));
        rSButtonRiple_modifier_supprimer.setVisible(false);
    }
    
    private void initUpdate() {
        rSButtonRiple_ajouter.setText("Payer et archiver");
        rSButtonRiple_ajouter.setBackground(Color.green);
        rSButtonRiple_ajouter.setColorHover(new Color(0,200,0));
        rSButtonRiple_ajouter.setVisible(true);
        
        rSButtonRiple_modifier_supprimer.setText("Annuler paiement");
        rSButtonRiple_modifier_supprimer.setBackground(Color.red);
        rSButtonRiple_modifier_supprimer.setColorHover(new Color(153,102,0));
        rSButtonRiple_modifier_supprimer.setVisible(true);
    }

    private void initTable() {
        initNew();
        String entete[] = {"N°", "NOM ET PRENOM", "ANNEE", "MOIS", "SALAIRE DE BASE", "PRIME NON IMPOSABLE", "PRIME IMPOSABLE", "RBG", "RBGI", "CNSS 5,25","CNSS 16,40", "ANPE", "ABAT CHARGE PRO.", "BASE CALCUL IUTS", "BASE ARRONDIE", "ABAT CHARGE FAMIL", "ALLOCATION FAMIL", "IUTS", "NET A PAYER", "ID"};
        DefaultTableModel dt = new DefaultTableModel(null,entete);
        dt.setRowCount(0);
        
        String annee = "", mois = "";// rechercher = null;
        if(rSComboMetro_annee.getSelectedIndex() > -1){
            annee = rSComboMetro_annee.getSelectedItem().toString();
        }
        if(rSComboMetro_mois.getSelectedIndex() > -1){
            mois = rSComboMetro_mois.getSelectedItem().toString();
        }
//        
//        if(rSMTextFull_rechercher.getText().length() > 0){
//            rechercher = rSMTextFull_rechercher.getText();
//        }
//        int id_annee = 0, id_mois = 0;
//        Annee an = anneeController.getAnnee(annee); 
//        if(an != null){
//            id_annee = an.getId();
//        }
//        Mois m = moisController.getMois(mois);
//        if(m != null){
//            id_mois = m.getId();
//        }
        ArrayList<Personnel> list_personnel = personnelController.getPersonnels();
        int somme_salaire_brut = 0, somme_cnss_employeur = 0, somme_rbg = 0, somme_rbgi = 0, somme_iuts = 0, somme_anpe = 0, somme_imposable = 0, somme_non_imposable = 0, somme_caisse = 0,somme_allocation=0, somme_abattement_pro = 0, somme_base_calcul_iuts = 0, somme_base_arrondie = 0, somme_abattement_famil = 0, somme_net_a_payer = 0;
        for(int i = 0; i< list_personnel.size(); i++){
            Object colonne[] = new Object[20];
            colonne[0] = i + 1;
            colonne[1] = list_personnel.get(i).getNom_prenom();
            colonne[2] = annee;
            colonne[3] = mois;
            int salaire_base = list_personnel.get(i).getSalaire();
            int prime_non_impo = (int) calcul_prime_non_imposable(list_personnel.get(i).getId());
            int prime_impo = (int) calcul_prime_imposable(list_personnel.get(i).getId());
            int salaire_indemite = salaire_base + prime_impo+prime_non_impo;
            int caisse_employer = (int) ((salaire_indemite * 5.25) / 100);
            int rbg = salaire_indemite-caisse_employer;
            int rbgi = rbg - (rbg*13/100);
            int caisse_employeur = (int) ((rbgi * 16.4) / 100);
            int abattement_pro = (int) ((rbgi - caisse_employer) * abattementController.getAbattement(list_personnel.get(i).getId()).getCharge_professionnelle() / 100);
            colonne[4] = salaire_base;
            somme_salaire_brut += list_personnel.get(i).getSalaire();
            
            colonne[5] = prime_non_impo;
            somme_non_imposable += prime_non_impo;
            
            colonne[6] = prime_impo;
            somme_imposable += prime_impo;
            colonne[7] = rbg;
            somme_rbg += rbg;
            
            colonne[8] = rbgi;
            somme_rbgi += rbgi;
            int anpe = (int) ((rbgi * 0.5) / 100);
            colonne[9] = caisse_employer;
            somme_caisse += caisse_employer;
            colonne[10] = caisse_employeur;
            somme_cnss_employeur += caisse_employeur;
            colonne[11] = anpe;
            somme_anpe += anpe;
            
            
            colonne[12] = abattement_pro;
            somme_abattement_pro += abattement_pro;
            int base_arrondie = (rbgi / 1000) * 1000;
            int abattement_famil = (int) ((base_arrondie * abattementController.getAbattement(list_personnel.get(i)).getCharge_familiale() / 100));
            int base_calcule_iuts = (base_arrondie-abattement_famil);
            colonne[13] = base_calcule_iuts;
            somme_base_calcul_iuts += base_calcule_iuts;
            colonne[14] = base_arrondie;
            somme_base_arrondie += base_arrondie;
            colonne[15] = abattement_famil;
            int allocation_famille = (int) (1500 * personnelController.getPersonnel(list_personnel.get(i).getId()).getCharge());
            somme_allocation+=allocation_famille;
            colonne[16] = allocation_famille;
            somme_abattement_famil+=allocation_famille;
            somme_abattement_famil += abattement_famil;
            int iuts = getIuts(abattement_famil);
            colonne[17] = iuts;
            somme_iuts += iuts;
            int net_a_payer = rbg - caisse_employer -iuts+allocation_famille;
            colonne[18] = net_a_payer;
            somme_net_a_payer += net_a_payer;
            colonne[19] = list_personnel.get(i).getId();
            System.out.println(list_personnel.get(i).getId());
            dt.addRow(colonne);
        }
        Object colonne[] = new Object[20];
        colonne[0] = "";
        colonne[1] = "";
        colonne[2] = "";
        colonne[3] = "";
        colonne[4] = "";
        colonne[5] = "";
        colonne[6] = "";
        colonne[7] = "";
        colonne[8] = "";
        colonne[9] = "";
        colonne[10] = "";
        colonne[11] = "";
        colonne[12] = "";
        colonne[13] = "";
        colonne[14] = "";
        colonne[15] = "";
        colonne[16] = "";
        colonne[17] = "";
        colonne[18] = "";
        colonne[19] = "";
        dt.addRow(colonne);
        
        colonne = new Object[20];
        colonne[0] = "###";
        colonne[1] = "TOTAL";
        colonne[2] = annee;
        colonne[3] = mois;
        colonne[4] = somme_salaire_brut;
        colonne[5] = somme_non_imposable;
        colonne[6] = somme_imposable;
        colonne[7] = somme_rbg;
        colonne[8] = somme_rbgi;
        colonne[9] = somme_caisse;
        colonne[10] = somme_cnss_employeur;
        colonne[11] = somme_anpe;
        colonne[12] = somme_abattement_pro;
        
        
        colonne[13] = somme_base_calcul_iuts;
        colonne[14] = somme_base_arrondie;
        colonne[15] = somme_abattement_famil;
        colonne[16] = somme_allocation;
        colonne[17] = somme_iuts;
        colonne[18] = somme_net_a_payer;
        colonne[19] = "";
        dt.addRow(colonne);
        this.jTable_renumeration.setModel(dt);
        if (jTable_renumeration.getColumnModel().getColumnCount() > 0) {
            jTable_renumeration.getColumnModel().getColumn(0).setMinWidth(35);
            jTable_renumeration.getColumnModel().getColumn(0).setPreferredWidth(35);
            jTable_renumeration.getColumnModel().getColumn(0).setMaxWidth(35);
            
            jTable_renumeration.getColumnModel().getColumn(1).setMinWidth(230);
            jTable_renumeration.getColumnModel().getColumn(1).setPreferredWidth(230);
            jTable_renumeration.getColumnModel().getColumn(1).setMaxWidth(230);
            
            jTable_renumeration.getColumnModel().getColumn(2).setMinWidth(90);
            jTable_renumeration.getColumnModel().getColumn(2).setPreferredWidth(90);
            jTable_renumeration.getColumnModel().getColumn(2).setMaxWidth(90);
            jTable_renumeration.getColumnModel().getColumn(3).setMinWidth(90);
            jTable_renumeration.getColumnModel().getColumn(3).setPreferredWidth(90);
            jTable_renumeration.getColumnModel().getColumn(3).setMaxWidth(90);
            jTable_renumeration.getColumnModel().getColumn(4).setCellRenderer(NumberRenderer.get_FCFA_render());
            int taille = 160;
            jTable_renumeration.getColumnModel().getColumn(4).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(4).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(4).setMaxWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(5).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(5).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(5).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(5).setMaxWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(6).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(6).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(6).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(6).setMaxWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(7).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(7).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(7).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(7).setMaxWidth(taille);
            
            jTable_renumeration.getColumnModel().getColumn(8).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(8).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(8).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(8).setMaxWidth(taille);
            
            jTable_renumeration.getColumnModel().getColumn(9).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(9).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(9).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(9).setMaxWidth(taille);
            
            jTable_renumeration.getColumnModel().getColumn(10).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(10).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(10).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(10).setMaxWidth(taille);
            
            jTable_renumeration.getColumnModel().getColumn(11).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(11).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(11).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(11).setMaxWidth(taille);
            
            jTable_renumeration.getColumnModel().getColumn(12).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(12).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(12).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(12).setMaxWidth(taille);
            
            jTable_renumeration.getColumnModel().getColumn(13).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(13).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(13).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(13).setMaxWidth(taille);
            
            jTable_renumeration.getColumnModel().getColumn(14).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(14).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(14).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(14).setMaxWidth(taille);
            
            jTable_renumeration.getColumnModel().getColumn(15).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(15).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(15).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(15).setMaxWidth(taille);
            
            jTable_renumeration.getColumnModel().getColumn(16).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(16).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(16).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(16).setMaxWidth(taille);
            
            jTable_renumeration.getColumnModel().getColumn(17).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(17).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(17).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(17).setMaxWidth(taille);
            
            jTable_renumeration.getColumnModel().getColumn(18).setCellRenderer(NumberRenderer.get_FCFA_render());
            jTable_renumeration.getColumnModel().getColumn(18).setMinWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(18).setPreferredWidth(taille);
            jTable_renumeration.getColumnModel().getColumn(18).setMaxWidth(taille);
            
            jTable_renumeration.getColumnModel().getColumn(19).setMinWidth(5);
            jTable_renumeration.getColumnModel().getColumn(19).setPreferredWidth(5);
            jTable_renumeration.getColumnModel().getColumn(19).setMaxWidth(5);
            
            jTable_renumeration.setRowHeight(30);
            jTable_renumeration.getTableHeader().setBackground(new Color(0,112,192));
            jTable_renumeration.getTableHeader().setForeground(Color.white);
            jTable_renumeration.getTableHeader().setFont(new Font("Cambria Math", Font.BOLD, 13));
            jTable_renumeration.setFont(new Font("Cambria Math", Font.BOLD, 12));
            jTable_renumeration.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            //jTable_renumeration.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        }
    }

    private void initCBAnee() {
        rSComboMetro_annee.removeAllItems();
        anneeController.getAnnees().forEach((a) -> {
            rSComboMetro_annee.addItem(a.getLibelle());
        });
    }

    private void initCBMois() {
        rSComboMetro_mois.removeAllItems();
        moisController.getMois().forEach((m) -> {
            rSComboMetro_mois.addItem(m.getLibelle());
        });
    }

    private int getRBG(int id_personnel) {
        int salaiare = personnelController.getPersonnel(id_personnel).getSalaire();
        int somme_renumeration_accessoire = 0;
        String annee = null, mois = null;
        if(rSComboMetro_annee.getSelectedIndex() > -1){
            annee = rSComboMetro_annee.getSelectedItem().toString();
        }
        if(rSComboMetro_mois.getSelectedIndex() > -1){
            mois = rSComboMetro_mois.getSelectedItem().toString();
        }
        
        int id_annee = 0, id_mois = 0;
        Annee an = anneeController.getAnnee(annee); 
        if(an != null){
            id_annee = an.getId();
        }
        Mois m = moisController.getMois(mois);
        if(m != null){
            id_mois = m.getId();
        }
        ArrayList<RenumerationAccessoire> list = renumerationAccessoireController.getRenumerations(id_annee, id_mois, null, id_personnel);
        for (RenumerationAccessoire r : list) {
            somme_renumeration_accessoire += r.getMontant();
        }
        
        double somme_avantage_en_nature = 0;

        AvantageEnNature personnel_avantage_en_nature = avantageEnNatureController.getAvantageEnNature(personnelController.getPersonnel(id_personnel));
        if(personnel_avantage_en_nature != null){
            somme_avantage_en_nature += personnel_avantage_en_nature.getLogement();
            somme_avantage_en_nature += personnel_avantage_en_nature.getAmeublement();
            somme_avantage_en_nature += personnel_avantage_en_nature.getElectricite();
            somme_avantage_en_nature += personnel_avantage_en_nature.getEau();
            somme_avantage_en_nature += personnel_avantage_en_nature.getTelephone();
            somme_avantage_en_nature += personnel_avantage_en_nature.getVehicule();
        }
        
        
        double retenue_cnss = 0.00;
        Abattement personnel_abattement = abattementController.getAbattement(personnelController.getPersonnel(id_personnel));
        double total_actif = salaiare + somme_renumeration_accessoire + somme_avantage_en_nature;
        if(personnel_abattement != null){
            retenue_cnss = total_actif*personnel_abattement.getRetenue_cnss()/100;
        }
        return (int) (total_actif - retenue_cnss);
    }

    private double getTauxChargeProf(int id_personnel) {
        Abattement personnel_abattement = abattementController.getAbattement(personnelController.getPersonnel(id_personnel));
        if(personnel_abattement == null){
            return 0.00;
        }
        return personnel_abattement.getCharge_professionnelle();
    }

    private double getTauxChargeFamil(int id_personnel) {
        Abattement personnel_abattement = abattementController.getAbattement(personnelController.getPersonnel(id_personnel));
        if(personnel_abattement == null){
            return 0.00;
        }
        return personnel_abattement.getCharge_familiale();
    }

    private int getIuts(int rni) {
        if(rni <= 25000){
            return rni*1/100;
        }
        
        if(rni <= 50000){
            return (rni - 25000)*2/100 + 25000*1/100;
        }
        
        if(rni <= 100000){
            return (rni - 50000)*6/100 + 25000*2/100 + 25000*1/100;
        }
        
        if(rni <= 150000){
            return (rni - 100000)*13/100 + 50000*6/100 + 25000*2/100 + 25000*1/100;
        }
        
        if(rni <= 300000){
            return (rni - 150000)*25/100 +  50000*13/100 + 50000*6/100 + 25000*2/100 + 25000*1/100;
        }
        
        if(rni <= 400000){
            return (rni - 300000)*30/100 + 150000*25/100 +  50000*13/100 + 50000*6/100 + 25000*2/100 + 25000*1/100;
        }
        
        if(rni <= 700000){
            return (rni - 400000)*32/100 + 100000*30/100 + 150000*25/100 +  50000*13/100 + 50000*6/100 + 25000*2/100 + 25000*1/100;
        }
        
        if(rni <= 1000000){
            return (rni - 700000)*34/100 + 300000*32/100 + 100000*30/100 + 150000*25/100 +  50000*13/100 + 50000*6/100 + 25000*2/100 + 25000*1/100;
        }
        
        return (rni - 1000000)*34/100 + 300000*34/100 + 300000*32/100 + 100000*30/100 + 150000*25/100 +  50000*13/100 + 50000*6/100 + 25000*2/100 + 25000*1/100;
    }
    
    private double calcul_prime_non_imposable(int id_personne){
        if(rSComboMetro_annee.getSelectedIndex() < 0 || rSComboMetro_mois.getSelectedIndex() < 0){
            return 0.0;
        }
        ArrayList<RenumerationAccessoire> renumerationAccessoire = renumerationAccessoireController.getRenumerations(anneeController.getAnnee(rSComboMetro_annee.getSelectedItem().toString()).getId(), moisController.getMois(rSComboMetro_mois.getSelectedItem().toString()).getId(), null, id_personne);
        double somme = 0.00;
        for (RenumerationAccessoire r : renumerationAccessoire) {
            if(!r.isEst_imposable()){
                somme += r.getMontant();
            }
        }
        return somme;
    }
    
    private double calcul_prime_imposable(int id_personne){
        if(rSComboMetro_annee.getSelectedIndex() < 0 || rSComboMetro_mois.getSelectedIndex() < 0){
            return 0.0;
        }
        ArrayList<RenumerationAccessoire> renumerationAccessoire = renumerationAccessoireController.getRenumerations(anneeController.getAnnee(rSComboMetro_annee.getSelectedItem().toString()).getId(), moisController.getMois(rSComboMetro_mois.getSelectedItem().toString()).getId(), null, id_personne);
        double somme = 0.00;
        for (RenumerationAccessoire r : renumerationAccessoire) {
            if(r.isEst_imposable()){
                somme += r.getMontant();
            }
        }
        return somme;
    }
}
